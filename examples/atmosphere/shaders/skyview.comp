/* VanadiumEngine, a Vulkan rendering toolkit
 * Copyright (C) 2022 Friedrich Vock
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
#version 450 core

#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0, rgba32f) uniform image2D skyViewLUT;
layout(set = 1, binding = 0) uniform sampler2D transmittanceLUT;

// A spherical light source, projected onto the unit sphere around the camera
struct Sphere {
	vec2 center;
	float radiusSquared;
};

layout(set = 1, binding = 1, std140) uniform Constants {
	ivec4 lutSize;
	vec4 betaExtinctionZeroMie;
	vec4 betaExtinctionZeroRayleigh;
	vec4 absorptionZeroOzone;
	float heightScaleRayleigh;
	float heightScaleMie;
	float layerHeightOzone;
	float layer0ConstantFactorOzone;
	float layer1ConstantFactorOzone;
	float heightRangeOzone;
	float maxHeight;
	float groundRadius;
	float currentHeight;
	vec4 rayleighScattering;
	float mieScattering;
	Sphere sunSphere;
	vec3 sunLuminance;
};

#define HAS_TRANSMITTANCE_LUT
#include "functions/common.glsl"

const float tau = 6.28318531;

void main() {
	ivec2 imageCoordinate = ivec2(gl_LocalInvocationID.xy) + ivec2(gl_WorkGroupID.xy) * ivec2(gl_WorkGroupSize.xy);
	vec2 normalizedCoordinates = imageCoordinate / vec2(lutSize.xy);

	float theta = compressedLatitudeFromTexcoord(normalizedCoordinates.y) + halfPi;
	float phi = normalizedCoordinates.x * pi;

	if (imageCoordinate.x < lutSize.x && imageCoordinate.y < lutSize.y) {
		imageStore(skyViewLUT, imageCoordinate, vec4(computeLuminance(groundRadius + currentHeight, theta, cos(theta), phi, cos(phi)), 1.0f));
	}
}